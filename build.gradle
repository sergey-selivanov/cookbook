/*

    To make release and increase version:
        gradle -Preckon.stage=final -Preckon.scope=patch reckonTagPush
        gradle -Preckon.stage=final -Preckon.scope=minor reckonTagPush
        gradle -Preckon.stage=final -Preckon.scope=major reckonTagPush

    To properly substitute options, invoke specifying target environment: -PenvironmentName=env

    To make jpackage, specify -PinstallerType=type : exe rpm deb pkg
        dmg only works on desktop
        msi available?

*/

plugins {
    id 'application'
    id 'eclipse'
    id 'org.openjfx.javafxplugin' version '0.0.8'
    //id 'org.beryx.jlink' version '2.17.7'
    id 'org.beryx.runtime' version '1.8.1'  // non modular

    //id 'com.github.spotbugs' version '4.0.5'

    id 'net.saliman.properties' version '1.5.1'
    id 'com.github.ben-manes.versions' version '0.28.0'
    id 'org.ajoberstar.reckon' version '0.12.0'
}

repositories {
    jcenter()
}

dependencies {
    compile 'com.h2database:h2:1.4.200'
    compile 'org.apache.logging.log4j:log4j-slf4j-impl:2.13.2' // forcemerge
    //compile 'org.apache.logging.log4j:log4j-core:2.12.1'

//    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.30'    // fix jlink
//compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.30'

    compile 'org.kordamp.bootstrapfx:bootstrapfx-core:0.2.4'
    compile group: 'org.jsoup', name: 'jsoup', version: '1.13.1'

//    compile group: 'org.hibernate', name: 'hibernate-core', version: '5.4.12.Final'
//    compile group: 'org.flywaydb', name: 'flyway-core', version: '6.3.1'

    //testImplementation('org.junit.jupiter:junit-jupiter:5.6.0') // as junit doc says
    // as gradle doc says
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.6.1'

//    spotbugsPlugins 'com.h3xstream.findsecbugs:findsecbugs-plugin:1.10.1'
//    spotbugsPlugins 'com.mebigfatguy.fb-contrib:fb-contrib:7.4.7'
}


// tests has cyrillic and saved as unicode
// see also Eclipse: Set UTF8 encoding if specified in build.gradle https://github.com/gradle/gradle/issues/898
// https://gist.github.com/rponte/d660919434d094bbd35a1aabf7ef1bf0
//compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'


if(!project.hasProperty('reckon.scope')){
    project.ext.'reckon.scope' = 'patch'    // override default 'minor'
}

reckon {
    scopeFromProp()
    stageFromProp('dev', 'final')
}

javafx {
    version = '14.0.1'
    //version = '13.0.2'
    //version = '15-ea+4'
    modules = [ 'javafx.controls', 'javafx.fxml', 'javafx.web' ]
    configuration = 'compile'
}

//mainClassName = "$moduleName/org.sergeys.cookbook.ui.CookBook"    // module
mainClassName = 'org.sergeys.cookbook.ui.CookBook'

// http://andresalmiray.com/customize-jar-manifest-entries-with-maven-gradle/
// https://stackoverflow.com/questions/22659463/add-classpath-in-manifest-using-gradle
jar {
    manifest {
        attributes(
            'Main-Class'    : 'org.sergeys.cookbook.ui.CookBookLauncher',
            'Class-Path'    : configurations.compile.collect { it.getName() }.join(' '),
            'Built-By'       : System.properties['user.name'],
            'Build-Timestamp': new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(new Date()),
            //'Build-Revision' : versioning.info.commit,
            'Build-Revision' : project.version.toString(),
            'Created-By'     : "Gradle ${gradle.gradleVersion}",
            'Build-Jdk'      : "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
            'Build-OS'       : "${System.properties['os.name']} ${System.properties['os.arch']} ${System.properties['os.version']}"
        )
    }
}

// from openjfx samples
/*
eclipse {
    classpath {
        file {
            whenMerged {
                entries.findAll { it.properties.kind.equals('lib') }.each {
                    it.entryAttributes['module'] = 'true'
                }
            }
        }
    }
}
*/

// non modular
/*
// https://discuss.gradle.org/t/how-to-set-the-module-path-project-jigsaw-for-eclipse-projects-via-gradle/26801/3
eclipse {
    classpath {
        file {
            whenMerged {
                entries.findAll { isModule(it) }.each {
                    it.entryAttributes['module'] = 'true'
                }
                entries.findAll { isSource(it) && isTestScope(it) }.each {
                    it.entryAttributes['test'] = 'true'
                }
                entries.findAll { isLibrary(it) && isTestScope(it) }.each {
                    it.entryAttributes['test'] = 'true'
                }
            }
        }
//        defaultOutputDir = file('build')
//        downloadSources = true
//        downloadJavadoc = true
    }
}
*/
boolean isLibrary(entry) { return entry.properties.kind.equals('lib') }
boolean isTestScope(entry) { return entry.entryAttributes.get('gradle_used_by_scope').equals('test'); }
boolean isModule(entry) { isLibrary(entry) && !isTestScope(entry); }
boolean isSource(entry) { return entry.properties.kind.equals('src'); }

// https://github.com/beryx/badass-jlink-plugin/issues/72
// Execute: ./gradlew suggestMergedModuleInfo
// Remove the lines contaning provides clauses and put the resulting mergedModule configuration in your jlink block.

/*
jlink {
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages'] // --bind-services ?
    launcher {
        name = 'cookbook'
    }
//    forceMerge('log4j-api') // https://github.com/beryx/badass-jlink-plugin/issues/14

//    mergedModule {
//        additive = true
        //requires 'java.desktop'
        //requires transitive 'java.sql'
        //uses 'java.sql.Driver'
        //provides 'java.sql.Driver' with 'org.hsqldb.jdbc.JDBCDriver'
//    }
}
*/

// generate windows version
//def winversion = "0.0.0.0" // is not compatible with MSI rules [0.0.4.0]
def winversion = '0.0.0'
def versionComponents = version.toString().split('\\.', 3)
def patchComponents = versionComponents[2].split('\\D', 2)
/*if(patchComponents.length == 1){
    winversion = versionComponents[0] + "." + versionComponents[1] + "." + patchComponents[0] + "." + bnn
}
else if(patchComponents.length == 2){
    winversion = versionComponents[0] + "." + versionComponents[1] + "." + patchComponents[0] + ".0"
}*/
winversion = versionComponents[0] + "." + versionComponents[1] + "." + patchComponents[0]
println "win version: " + winversion

//println "os: " + org.gradle.internal.os.OperatingSystem.current().getDisplayName()

runtime {
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages',
        '--strip-native-commands'   // undocumented?
    ]
//    modules = ['java.sql', 'java.desktop', 'java.xml', 'java.net.http'] // auto suggested by plugin

    jpackage {
        //appVersion = '0.0.4'
        //appVersion = winversion
        mainClass = 'org.sergeys.cookbook.ui.CookBookLauncher'

        imageName = 'CookBook'
        installerName = 'CookBook'
        installerOptions = [
            '--vendor', 'Sergey Selivanov', // '"Sergey Selivanov"',
            '--verbose'
        ]
        installerType = project.ext.installerType

        //imageOptions = ['--icon', 'src/main/resources/images/amor.ico']
        if (org.gradle.internal.os.OperatingSystem.current().windows) {
            appVersion = winversion
            imageOptions += ['--icon', 'src/main/resources/images/amor.ico']
            //installerType = 'exe'
            installerOptions += [
                '--win-menu', '--win-shortcut', '--win-dir-chooser',
                '--win-menu-group', '"CookBook"'
            ]
        }
        if (org.gradle.internal.os.OperatingSystem.current().macOsX) {
            imageOptions += ['--icon', 'src/main/resources/images/amor.icns']
            //installerType = 'pkg'   // dmg fails in remote jenkins build
        }
        if (org.gradle.internal.os.OperatingSystem.current().linux) {
            appVersion = winversion // rpm: illegal char - in version
            //installerType = project.ext.installerType
            imageOptions += ['--icon', 'src/main/resources/images/amor.png']
            installerOptions += [
                '--linux-shortcut', '--linux-menu-group', 'Other'
            ]

            //if(project.ext.installerType == 'rpm'){
                //installerOptions += ['--icon', 'src/main/resources/images/amor.png'] // not allowed
            //}
        }
    }
}

def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { it -> version.toUpperCase().contains(it) }
    def regex = /^[0-9,.v-]+(-r)?$/
    return !stableKeyword && !(version ==~ regex)
}

dependencyUpdates {
    rejectVersionIf {
        isNonStable(it.candidate.version)
    }
}

test {
    useJUnitPlatform()
//    testLogging {
//        events "passed", "skipped", "failed"
//    }
    // do not perform unit tests
    exclude 'org/sergeys/cookbook/**'
}

/*
spotbugs {
    ignoreFailures = true

     //'org.sergeys.cookbook.*',
    onlyAnalyze = [ 'org.sergeys.cookbook.logic.*', 'org.sergeys.cookbook.ui.*']
//    excludeFilter = file("$projectDir/config/findbugs/excludeFilter.xml")
}
*/

/*
spotbugsMain {
    reports {
        html {
            enabled = true
//            destination = file("$buildDir/reports/spotbugs/main/spotbugs.html")
 //           stylesheet = 'fancy-hist.xsl'
        }
    }
}
*/
