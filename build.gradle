/*

    To make release and increase version:
        gradlew -Preckon.stage=final -Preckon.scope=patch reckonTagPush
        gradlew -Preckon.stage=final -Preckon.scope=minor reckonTagPush
        gradlew -Preckon.stage=final -Preckon.scope=major reckonTagPush

    To make jpackage, specify -PinstallerType=type : exe msi rpm deb pkg
        ? dmg only works on desktop
        exe is default on win, wix required in the path for both exe and msi
        gradlew jpackage -PinstallerType=msi -i
        gradlew jpackage -PinstallerType=deb -i
        gradlew jpackage -PinstallerType=rpm -i

NOTE win installer is broken on win 10
https://bugs.openjdk.java.net/browse/JDK-8254697
https://bugs.openjdk.java.net/browse/JDK-8254920
"after copying ./JabRef/runtime/bin/zip.dll to ./JabRef shows this working"

    To properly substitute options, explicitly specify target environment: -PenvironmentName=production
        default is local
        gradlew -PenvironmentName=production
        gradlew clean jpackage -PenvironmentName=production -i

*/

/*
buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        //classpath 'org.ajoberstar.grgit:grgit-core:4.1.0'
        // https://mvnrepository.com/artifact/org.eclipse.jgit/org.eclipse.jgit
        //classpath group: 'org.eclipse.jgit', name: 'org.eclipse.jgit', version: '5.10.0.202012080955-r'
        //classpath group: 'org.eclipse.jgit', name: 'org.eclipse.jgit', version: '5.7.0.202003110725-r'
    }
}
*/


plugins {
    id 'application'
    id 'eclipse'
    id 'org.openjfx.javafxplugin' version '0.0.9'
    id 'org.beryx.jlink' version '2.23.2' // modular
    //id 'org.beryx.runtime' version '1.12.1'  // non modular

    id 'com.github.spotbugs' version '4.6.0'
    id 'checkstyle'
    id 'pmd'
    //id 'jacoco'

    id 'net.saliman.properties' version '1.5.1'
    id 'com.github.ben-manes.versions' version '0.36.0'
    id 'org.ajoberstar.reckon' version '0.13.0'
    id 'org.ajoberstar.grgit' version '4.1.0'
}

repositories {
    jcenter()
}

dependencies {

    // modular: https://github.com/h2database/h2database/issues/1415
    runtimeOnly 'com.h2database:h2:1.4.200'

    //compile 'org.slf4j:slf4j-api:1.7.30'  // module not found?
    implementation 'org.slf4j:slf4j-api:1.7.25'
    runtimeOnly 'org.apache.logging.log4j:log4j-slf4j-impl:2.14.0'
    runtimeOnly 'org.apache.logging.log4j:log4j-core:2.14.0'
    implementation 'org.apache.logging.log4j:log4j-api:2.14.0' // TODO ?

    implementation 'org.kordamp.bootstrapfx:bootstrapfx-core:0.4.0'
    // runtimeOnly?
    //runtimeOnly 'org.kordamp.bootstrapfx:bootstrapfx-core:0.4.0'

    implementation 'org.jsoup:jsoup:1.13.1'

    implementation 'org.flywaydb:flyway-core:7.5.1'

//    compile group: 'org.hibernate', name: 'hibernate-core', version: '5.4.12.Final'

    //testImplementation('org.junit.jupiter:junit-jupiter:5.7.0') // as junit doc says
    // as gradle doc says
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'

    spotbugsPlugins 'com.h3xstream.findsecbugs:findsecbugs-plugin:1.11.0'
    spotbugsPlugins 'com.mebigfatguy.sb-contrib:sb-contrib:7.4.7'
}

// TODO add link why is this
modularity.disableEffectiveArgumentsAdjustment()

//mainClassName = "$moduleName/org.sergeys.cookbook.ui.CookBook"    // module
application.mainModule = 'cookbook'
mainClassName = 'org.sergeys.cookbook.ui.CookBook' // non modular and now also modular

// tests has cyrillic and saved as unicode
// see also Eclipse: Set UTF8 encoding if specified in build.gradle https://github.com/gradle/gradle/issues/898
// https://gist.github.com/rponte/d660919434d094bbd35a1aabf7ef1bf0
//compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'

//import org.ajoberstar.grgit.Grgit
//ext.repo = Grgit.open(dir: project.file('.'))

import org.apache.tools.ant.filters.ReplaceTokens

if(!project.hasProperty('installerType')){
    project.ext.installerType = 'exe'
}

if(!project.hasProperty('reckon.scope')){
    project.ext.'reckon.scope' = 'patch'    // override default 'minor'
}

reckon {
    scopeFromProp()
    stageFromProp('dev', 'final')
}

javafx {
    version = '15.0.1'
    modules = [ 'javafx.controls', 'javafx.fxml', 'javafx.web' ]
    configuration = 'compile'
}

processResources {

    exclude '**/options-template.properties'
    exclude '**/options.properties', '**/options-sample.properties'
    exclude '**/version.properties'
    exclude '**/unused'
}

task adjustEnvResources(type: Copy) {

    // jenkins build number
    // ? run 'clean' in jenkins build otherwise when resources up-to-date, will not be updated
    def val = System.getenv('BUILD_NUMBER')
    def bn = (val == null ? 'undefined' : val)
    //def bnn = (val == null ? '0' : val)

    //val = System.getenv('BUILD_ID')
    //def bid = (val == null ? 'undefined' : val)

    val = System.getenv('USER');    // linux
    if(val == null){
        val = System.getenv('USERNAME');    // linux, windows
    }

    def builduser = (val == null ? 'undefined' : val)
    def buildhost = InetAddress.localHost.hostName


    from project.sourceSets.main.resources
    include 'options-template.properties'
    include 'version.properties'

    into project.sourceSets.main.output.resourcesDir

    filter(ReplaceTokens, tokens: project.filterTokens)
    filter(ReplaceTokens,
        tokens:[
//            'git.commit': repo.head().abbreviatedId,
//            'git.date': repo.head().date.toString(),
//            'git.branch': repo.branch.current.name,

            'git.commit': grgit.head().abbreviatedId,
            'git.date': grgit.head().date.toString(),
            'git.branch': grgit.branch.current.name,

            'build.date': new java.util.Date().toString(),
            'build.host': builduser + '@' + buildhost,
            'version': project.version.toString(),
            'build.number': bn,
            'environment.name': environmentName
            ])

    rename 'options-template.properties', 'options.properties'
}

compileJava.dependsOn adjustEnvResources


// http://andresalmiray.com/customize-jar-manifest-entries-with-maven-gradle/
// https://stackoverflow.com/questions/22659463/add-classpath-in-manifest-using-gradle
// TODO needed?
jar {
    manifest {
        attributes(
            'Main-Class'    : 'org.sergeys.cookbook.ui.CookBookLauncher',
            'Class-Path'    : configurations.compile.collect { it.getName() }.join(' '),
            'Built-By'       : System.properties['user.name'],
            'Build-Timestamp': new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(new Date()),
            //'Build-Revision' : versioning.info.commit,
            'Build-Revision' : project.version.toString(),
            'Created-By'     : "Gradle ${gradle.gradleVersion}",
            'Build-Jdk'      : "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
            'Build-OS'       : "${System.properties['os.name']} ${System.properties['os.arch']} ${System.properties['os.version']}"
        )
    }
}

// from openjfx samples
/*
eclipse {
    classpath {
        file {
            whenMerged {
                entries.findAll { it.properties.kind.equals('lib') }.each {
                    it.entryAttributes['module'] = 'true'
                }
            }
        }
    }
}
*/

// https://discuss.gradle.org/t/how-to-set-the-module-path-project-jigsaw-for-eclipse-projects-via-gradle/26801/3
eclipse {
    classpath {
        file {
            whenMerged {
                entries.findAll { isModule(it) }.each {
                    it.entryAttributes['module'] = 'true'
                }
                entries.findAll { isSource(it) && isTestScope(it) }.each {
                    it.entryAttributes['test'] = 'true'
                }
                entries.findAll { isLibrary(it) && isTestScope(it) }.each {
                    it.entryAttributes['test'] = 'true'
                }
            }
        }
//        defaultOutputDir = file('build')
//        downloadSources = true
//        downloadJavadoc = true
    }
}

boolean isLibrary(entry) { return entry.properties.kind.equals('lib') }
boolean isTestScope(entry) { return entry.entryAttributes.get('gradle_used_by_scope').equals('test'); }
boolean isModule(entry) { isLibrary(entry) && !isTestScope(entry); }
boolean isSource(entry) { return entry.properties.kind.equals('src'); }

// https://github.com/beryx/badass-jlink-plugin/issues/72
// Execute: ./gradlew suggestMergedModuleInfo
// Remove the lines contaning provides clauses and put the resulting mergedModule configuration in your jlink block.

//def winver1 = version.toString().replaceAll('-dev.*', '.10113')
def winver = version.toString().replaceAll('-dev.*', '') // jpackage allows up to 3 ver components
println "win version: " + winver
// TODO for dev, make like x.x.YMMDD


task makeClasspathResourcesJar(type: Jar) {
    archiveName 'cp-resources.jar'
    destinationDir file("${buildDir}/cp-resources")
    from('src/main/resources')
    include('db/**/*.sql')
}

// https://stackoverflow.com/questions/59902719/flyway-is-not-able-to-find-migrations-in-classpath-only-if-i-run-application-aft
// TODO pack in jar, copy jar and reference in -cp

tasks.jlink {
    dependsOn makeClasspathResourcesJar
    doLast {
        copy {
            //from 'src/main/resources'
            //into "$imageDir/bin/data"
            //include 'db/migration/*.sql'
            from "${buildDir}/cp-resources"
            into "$imageDir/bin/data"
        }

        delete("$imageDir/bin/cookbook", "$imageDir/bin/cookbook.bat")
        //delete("$imageDir/bin/*.exe") // for enableCds() instead of --strip-native-commands
        delete(
            "$imageDir/bin/java.exe",
            "$imageDir/bin/javaw.exe",
            "$imageDir/bin/jrunscript.exe",
            "$imageDir/bin/keytool.exe",
            "$imageDir/bin/rmid.exe",
            "$imageDir/bin/rmiregistry.exe")
        // TODO delete linux executables

    }
}

tasks.jpackageImage {
    doLast {
        // bug: installed package does not run on Windows 10
        copy {
            from "${buildDir}/jpackage/Cook Book/runtime/bin"
            into "${buildDir}/jpackage/Cook Book"
            include 'zip.dll'
        }
    }
}

jlink {
    //options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages'] // --bind-services ?
    //options = ['--compress', '2', '--no-header-files', '--no-man-pages', '--strip-native-commands']

    // TODO no '--strip-native-commands' when enableCds() - it runs java from image
    options = ['--compress', '2', '--no-header-files', '--no-man-pages']

    launcher {
        name = 'cookbook'   // TODO report issue with naming of 1st anf 2nd launchers in jpackage task

// $APPDIR
// https://bugs.openjdk.java.net/browse/JDK-8231910
// https://docs.oracle.com/en/java/javase/14/jpackage/packaging-tool-user-guide.pdf

        //jvmArgs = ['-cp', '$APPDIR/../runtime/bin/data/'] // .bat will be broken, .exe will work
        jvmArgs = ['-cp', '$APPDIR/../runtime/bin/data/cp-resources.jar'] // .bat will be broken, .exe will work
        // TODO this also auto adds /mods arg to cfg file, report issue
        // TODO see windowsScriptTemplate, unixScriptTemplate
    }

    enableCds()

    forceMerge('log4j-api') // https://github.com/beryx/badass-jlink-plugin/issues/14

//    mergedModule {
//        additive = true
        //requires 'java.desktop'
        //requires transitive 'java.sql'
        //uses 'java.sql.Driver'
        //provides 'java.sql.Driver' with 'org.hsqldb.jdbc.JDBCDriver'
//        requires 'cookbook'
//    }

    jpackage {
        installerType = project.ext.installerType

        // different imageName and installerName give error, files not found: jlink 2.23.1

        imageName = 'Cook Book'
        installerName = 'Cook Book' // shown in wix wizard as app name

        installerOptions = [
            '--vendor', 'Sergey Selivanov',
            '--verbose'
        ]

        if (org.gradle.internal.os.OperatingSystem.current().windows) {
            appVersion = winver

            icon = "${project.projectDir}/src/main/resources/images/amor.ico"

            installerOptions += [
                // saves generated wix files
                // TODO customize wizard images?
                '--temp', "${buildDir}/temp", // ? https://github.com/beryx/badass-runtime-plugin/issues/71

                '--win-menu', '--win-shortcut', '--win-dir-chooser',
                '--win-menu-group', 'Cook Book'
            ]
        }
        if (org.gradle.internal.os.OperatingSystem.current().linux) {
            // rpm: illegal char - in version
            if(project.ext.installerType == 'rpm'){
                appVersion = version.toString().replaceAll('-', '.')
            }

            icon = "${project.projectDir}/src/main/resources/images/amor.png"

            installerOptions += [
                // TODO use imageName
                '--resource-dir', "build/jpackage/Cook Book/lib", // required for icon: https://github.com/beryx/badass-jlink-plugin/issues/148
                '--linux-shortcut', '--linux-menu-group', 'Other'
            ]

//            installerOptions += ['--icon', 'src/main/resources/images/amor.png'] // not valid for deb

            //if(project.ext.installerType == 'rpm'){
                //installerOptions += ['--icon', 'src/main/resources/images/amor.png'] // not allowed
            //}
        }
    }
}


//println "os: " + org.gradle.internal.os.OperatingSystem.current().getDisplayName()

/*
runtime {
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages',
        '--strip-native-commands'   // undocumented?
    ]
//    modules = ['java.sql', 'java.desktop', 'java.xml', 'java.net.http'] // auto suggested by plugin

    jpackage {
        //appVersion = '0.0.4'
        //appVersion = winversion
        mainClass = 'org.sergeys.cookbook.ui.CookBookLauncher'

        imageName = 'CookBook'
        installerName = 'CookBook'
        installerOptions = [
            '--vendor', 'Sergey Selivanov', // '"Sergey Selivanov"',
            '--verbose'
        ]
        installerType = project.ext.installerType

        //imageOptions = ['--icon', 'src/main/resources/images/amor.ico']
        if (org.gradle.internal.os.OperatingSystem.current().windows) {
            appVersion = winversion
            imageOptions += ['--icon', 'src/main/resources/images/amor.ico']
            //installerType = 'exe'
            installerOptions += [
                '--win-menu', '--win-shortcut', '--win-dir-chooser',
                '--win-menu-group', '"CookBook"'
            ]
        }
        if (org.gradle.internal.os.OperatingSystem.current().macOsX) {
            imageOptions += ['--icon', 'src/main/resources/images/amor.icns']
            //installerType = 'pkg'   // dmg fails in remote jenkins build
        }
        if (org.gradle.internal.os.OperatingSystem.current().linux) {
            appVersion = winversion // rpm: illegal char - in version
            //installerType = project.ext.installerType
            imageOptions += ['--icon', 'src/main/resources/images/amor.png']
            installerOptions += [
                '--linux-shortcut', '--linux-menu-group', 'Other'
            ]

            //if(project.ext.installerType == 'rpm'){
                //installerOptions += ['--icon', 'src/main/resources/images/amor.png'] // not allowed
            //}
        }
    }
}
*/

def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { it -> version.toUpperCase().contains(it) }
    def regex = /^[0-9,.v-]+(-r)?$/
    return !stableKeyword && !(version ==~ regex)
}

dependencyUpdates {
    rejectVersionIf {
        isNonStable(it.candidate.version)
    }
}

test {
    useJUnitPlatform()
//    testLogging {
//        events "passed", "skipped", "failed"
//    }
    // do not perform unit tests
    exclude 'org/sergeys/cookbook/**'
}


spotbugs {
    ignoreFailures = true

     //'org.sergeys.cookbook.*',
    onlyAnalyze = [ 'org.sergeys.cookbook.logic.*', 'org.sergeys.cookbook.ui.*']
//    excludeFilter = file("$projectDir/config/findbugs/excludeFilter.xml")
}


/*
spotbugsMain {
    reports {
        html {
            enabled = true
//            destination = file("$buildDir/reports/spotbugs/main/spotbugs.html")
 //           stylesheet = 'fancy-hist.xsl'
        }
    }
}

*/


pmd {
    ignoreFailures = true
//    consoleOutput = true
    toolVersion = '6.23.0'
//    rulePriority = 5
//    ruleSets = ["category/java/errorprone.xml", "category/java/bestpractices.xml"]
}

checkstyle {
    ignoreFailures = true
    toolVersion = '8.32'
}
